pipeline {
    agent {
        docker {
            image 'once.sh-builder'
            args '-v once_jenkins:/var/dev -v jenkins_jenkins_home:/var/jenkins_home -w /var/dev --entrypoint "" --user root'
            reuseNode true
        }
    }

    options {
        ansiColor('xterm')
    }

    stages {
        stage('Print Checkout') {
            steps {
                script {
                    updateGitHubCommitStatus('pending', 'Build in progress')
                    def scmVars = checkout scm
                    echo "Checked out branch: ${scmVars.GIT_BRANCH}"
                }
            }
        }

        stage('Backup structr') {
            steps {
                // TODO: Job must clean completely before start
                withCredentials([sshUserPrivateKey(credentialsId: "agent.jenkins", keyFileVariable: 'keyfile'),
                                 string(credentialsId: 'jenkins4bitbucket', variable: 'BBTOKEN')]) {
                    sh '''#!/usr/bin/bash
                        set -e
                        ./Units/backup/backupStructr.sh
                    '''
                }
            }
        }
        stage('Backup jenkins') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: "agent.jenkins", keyFileVariable: 'keyfile')]) {
                    sh '''#!/usr/bin/bash
                        set -e
                        ./Units/backup/backupJenkins.sh
                    '''
                }
            }
        }
        stage('Backup once(test.wo-da.de)') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: "agent.jenkins", keyFileVariable: 'keyfile')]) {
                    sh '''#!/usr/bin/bash
                        set -e
                        ./Units/backup/backupOnce.sh
                    '''
                }
            }
        }
        stage('Stats') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: "agent.jenkins", keyFileVariable: 'keyfile')]) {
                    sh '''#!/usr/bin/bash
                        set -e
                        mkdir -p $WORKSPACE/_results
                        ssh -i ${keyfile} -o 'StrictHostKeyChecking no' backup.sfsre.com "tree /var/backups" > $WORKSPACE/_results/tree.txt
                        ssh -i ${keyfile} -o 'StrictHostKeyChecking no' backup.sfsre.com "du -skh /var/backups/*" > $WORKSPACE/_results/du.txt
                        ssh -i ${keyfile} -o 'StrictHostKeyChecking no' backup.sfsre.com "df -h /var/backups/" >> $WORKSPACE/_results/du.txt
                    '''
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: '_results/*', onlyIfSuccessful: true
        }
    }
}
