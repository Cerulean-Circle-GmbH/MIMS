pipeline {
    // Sollte in einem once.sh-light container gemacht werden not any?
    agent any

    stages {
        stage('Print Checkout') {
            steps {
                script {
                    def scmVars = checkout scm
                    echo "Checked out branch: ${scmVars.GIT_BRANCH}"
                }
            }
        }

        stage('show env') {
            steps {
                sh "env"
            }
        }

        stage('build image once.sh-builder') {
            steps {
                sh '''
                    set -e
                    BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            --entrypoint "" once.sh-builder /bin/bash -c \
                            "source ~/config/user.env &&
                            git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                            cd Once.2023 &&
                            git checkout $BRANCH &&
                            cd Units/docker-images/once.sh.ubuntu.22.04-builder &&
                            ./devTool docker.build"
                    '''
            }
        }

        stage('build image once.sh-server') {
            steps {
                sh '''
                    set -e
                    BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            --entrypoint "" once.sh-builder /bin/bash -c \
                            "source ~/config/user.env &&
                            git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                            cd Once.2023 &&
                            git checkout $BRANCH &&
                            cd Units/docker-images/once.sh.ubuntu.22.04-server &&
                            ./devTool docker.build"
                    '''
            }
        }

        stage('build & deploy image once.sh-server multi-branch') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_IO_CRED', passwordVariable: 'DOCKER_PW', usernameVariable: 'DOCKER_LOGIN')]) {
                    sh '''
                        set -e
                        BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                    --entrypoint "" once.sh-builder /bin/bash -c \
                                    "source ~/config/user.env &&
                                    git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                                    cd Once.2023 &&
                                    git checkout $BRANCH &&
                                    cd Units/docker-images/once.sh.ubuntu.22.04-server &&
                                    ./devTool docker.buildx.use &&
                                    docker login -u ${DOCKER_LOGIN} --password ${DOCKER_PW} &&
                                    devTool docker.buildx.push"
                        '''
                }
            }
        }

        stage('release image once.sh-server multi-branch') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKER_IO_CRED', passwordVariable: 'DOCKER_PW', usernameVariable: 'DOCKER_LOGIN')]) {
                    sh '''#!/bin/bash
                        set -e
                        BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                        if [[ "$RELEASE_CMD" == "release" ]]; then
                            if [[ $BRANCH != "main" ]]; then
                                echo "Should be the main branch but is: $BRANCH"
                                exit 1
                            else
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                                            --entrypoint "" once.sh-builder /bin/bash -c \
                                            "source ~/config/user.env &&
                                            git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                                            cd Once.2023 &&
                                            git checkout $BRANCH &&
                                            cd Units/docker-images/once.sh.ubuntu.22.04-server &&
                                            ./devTool docker.buildx.use &&
                                            docker login -u ${DOCKER_LOGIN} --password ${DOCKER_PW} &&
                                            devTool docker.buildx.push.latest"
                            fi
                        elif [ ! -z "$RELEASE_CMD" ]; then
                            echo "RELEASE_CMD has the wrong value: $RELEASE_CMD"
                            exit 1
                        fi
                        '''
                }
            }
        }
    }
    post {
        success {
            script {
                updateGitHubCommitStatus('success', 'Build succeeded')
            }
        }
        failure {
            script {
                updateGitHubCommitStatus('failure', 'Build failed')
            }
        }
        unstable {
            script {
                updateGitHubCommitStatus('failure', 'Build unstable')
            }
        }
        always {
            script {
                // Optional: Weitere Aktionen, die immer ausgef√ºhrt werden
            }
        }
    }
}

def updateGitHubCommitStatus(String state, String description) {
    def context = 'continuous-integration/jenkins'
    def gitCommit = env.GIT_COMMIT
    def repoUrl = 'https://api.github.com/repos/username/repository/statuses/' + gitCommit
    def payload = [
        state       : state,
        target_url  : env.BUILD_URL,
        description : description,
        context     : context
    ]
    def payloadJson = groovy.json.JsonOutput.toJson(payload)

    withCredentials([string(credentialsId: 'GithubPersonalAccessToken', variable: 'GITHUB_TOKEN')]) {
        sh """curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '${payloadJson}' \
              ${repoUrl}"""
    }
}
