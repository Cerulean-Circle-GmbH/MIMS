pipeline {
    agent {
        docker {
            image 'once.sh-builder'
            args '-v once_jenkins:/var/dev  -v jenkins_jenkins_home:/var/jenkins_home -w /var/dev --entrypoint "" --user root'
            reuseNode true
        }
    }

    environment {
        TREE = 'com/neom/EAM'
        NAME = 'com.neom.EAM'
    }

    options {
        ansiColor('xterm')
    }
    
    stages {
        stage('Cleanup & update') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    rm -rf results
                    mkdir -p results

                    # Update known_hosts (only for bitbucket once in a while)
                    #ssh-keygen -f "/root/.ssh/known_hosts" -R "bitbucket.org"
                    #ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts

                    # Update EAMD
                    cd /var/dev
                    git clone 2cuBitbucket:donges/EAMD.ucp.git || true
                    cd EAMD.ucp
                    git reset --hard
                    git checkout dev/neom
                    git pull

                    # Update Once.2023
                    cd /var/dev
                    git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git || true
                    cd Once.2023
                    git reset --hard
                    git checkout dev
                    git pull
                    '''
            }
        }
        stage('Check branches') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    source ~/config/user.env
                    oo mode.dev
                    oo update
                    cd /var/dev/EAMD.ucp
                    export LOG_DEVICE=$WORKSPACE/results/branch.txt
                    config save log
                    oo branches.check feature/neom dev/neom 6a7a3d3
                    export LOG_DEVICE=/dev/tty
                    config save log
                    cat $WORKSPACE/results/branch.txt 
                    cat $WORKSPACE/results/branch.txt | ansi2html > $WORKSPACE/results/branch.html
                    '''
            }
        }
        stage('Create class svg (wavi)') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    TMP=/tmp/${TREE}
                    SOURCE=/var/dev/EAMD.ucp/Components/${TREE}
                    source ~/config/user.env
                    oo mode.dev
                    oo update
                    rm -rf $TMP
                    mkdir -p $TMP
                    rsync -a --include='*.js' --include='*/' --exclude='*' $SOURCE/ $TMP/
                    wavi $TMP $WORKSPACE/results/$NAME.wavi.svg
                    '''
            }
        }
        stage('Create class svg (puml)') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    source ~/config/user.env
                    oo mode.dev
                    oo update
                    cd /var/dev/Once.2023/Units/generatePUML
                    rm -rf _*
                    npm install
                    ./generatePUML.js /var/dev/EAMD.ucp/Components/com/neom
                    export PLANTUML_LIMIT_SIZE=18192
                    plantuml _test.puml -tsvg
                    plantuml _test.puml -tpng
                    mv _test.svg $WORKSPACE/results/$NAME.puml.svg
                    mv _test.png $WORKSPACE/results/$NAME.puml.png
                    '''
            }
        }
        stage('Static analysis of EAMD') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    source ~/config/user.env
                    oo mode.dev
                    oo update
                    cd /var/dev/Once.2023/Units/staticAnalysis
                    ./staticAnalysis.sh /var/dev/EAMD.ucp | tee $WORKSPACE/results/staticAnalysis.txt
                    '''
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'results/*', onlyIfSuccessful: true
        }
    }
}