pipeline {
    agent {
        docker {
            image 'once.sh-builder'
            args '-v once_jenkins:/var/dev  -v jenkins_jenkins_home:/var/jenkins_home -w /var/dev --entrypoint "" --user root'
            reuseNode true
        }
    }

    environment {
        // Ignore strict host key checking
        GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no'
    }

    options {
        ansiColor('xterm')
    }

    stages {
        stage('Print Checkout') {
            steps {
                script {
                  updateGitHubCommitStatus('pending', 'Build in progress')
                    def scmVars = checkout scm
                    echo "Checked out branch: ${scmVars.GIT_BRANCH}"
                }
            }
        }

        stage('build image once.sh-builder') {
            steps {
                sh '''
                    set -e
                    BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            --entrypoint "" once.sh-builder /bin/bash -c \
                            "source ~/config/user.env &&
                            git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                            cd Once.2023 &&
                            git checkout $BRANCH &&
                            cd Units/docker-images/once.sh.ubuntu.22.04-builder &&
                            ./devTool docker.build"
                    '''
            }
        }

        stage('build image once.sh-server') {
            steps {
                sh '''
                    set -e
                    BRANCH=`echo $GIT_BRANCH | sed "s;origin/;;"`
                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                            --entrypoint "" once.sh-builder /bin/bash -c \
                            "source ~/config/user.env &&
                            git clone 2cuGitHub:Cerulean-Circle-GmbH/Once.2023.git &&
                            cd Once.2023 &&
                            git checkout $BRANCH &&
                            cd Units/docker-images/once.sh.ubuntu.22.04-server &&
                            ./devTool docker.build"
                    '''
            }
        }

        stage('show env') {
            steps {
                sh "env"
            }
        }

        stage('Cleanup & update (dev/neom)') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    rm -rf results
                    mkdir -p results

                    # Update known_hosts (only for bitbucket once in a while)
                    #ssh-keygen -f "/root/.ssh/known_hosts" -R "bitbucket.org"
                    #ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts

                    # Update EAMD
                    cd /var/dev
                    git clone 2cuBitbucket:donges/EAMD.ucp.git || true
                    cd EAMD.ucp
                    git reset --hard
                    git checkout dev/neom
                    git pull
                    '''
            }
        }

        stage('Static analysis of EAMD') {
            steps {
                sh '''#!/usr/bin/bash
                    set -e
                    source ~/config/user.env
                    oo mode.dev
                    oo update
                    cd Units/staticAnalysis
                    ./staticAnalysis.sh /var/dev/EAMD.ucp | tee $WORKSPACE/results/staticAnalysis.txt
                    '''
            }
        }
    }
    post {
        success {
            script {
                updateGitHubCommitStatus('success', 'Build succeeded')
            }
        }
        failure {
            script {
                updateGitHubCommitStatus('failure', 'Build failed')
            }
        }
        unstable {
            script {
                updateGitHubCommitStatus('failure', 'Build unstable')
            }
        }
        always {
            archiveArtifacts artifacts: 'results/*', onlyIfSuccessful: true
        }
    }
}

def updateGitHubCommitStatus(String state, String description) {
    def context = 'continuous-integration/jenkins'
    def gitCommit = env.GIT_COMMIT
    def repoUrl = 'https://api.github.com/repos/Cerulean-Circle-GmbH/Once.2023/statuses/' + gitCommit
    def payload = [
        state       : state,
        target_url  : env.BUILD_URL,
        description : description,
        context     : context
    ]
    def payloadJson = groovy.json.JsonOutput.toJson(payload)

    withCredentials([string(credentialsId: 'GithubPersonalAccessToken', variable: 'GITHUB_TOKEN')]) {
        sh """curl -s -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '${payloadJson}' \
              ${repoUrl}"""
    }
}
